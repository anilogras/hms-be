// <auto-generated />
using System;
using HMS.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HMS.DataAccess.Migrations
{
    [DbContext(typeof(HMSContext))]
    [Migration("20250110191351_NullableGroupVoucher")]
    partial class NullableGroupVoucher
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HMS.Entities.Models.CommonModels.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("company");
                });

            modelBuilder.Entity("HMS.Entities.Models.CommonModels.Enterprise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("enterprise");
                });

            modelBuilder.Entity("HMS.Entities.Models.CommonModels.Referance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MedicalStaffId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("GuestId");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("address");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("StateId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("country");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MedicalStaffId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("GuestId");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("email");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MedicalStaffId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("GuestId");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("phone");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("state");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.DailyProcedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ProcedureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoutineCheckupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("RoutineCheckupId");

                    b.ToTable("dailyprocedure");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("diagnosis");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.HealthRecordDiagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DiagnosisId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("HealthRecordId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("healthrecorddiagnosis");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.HealthRecordSymptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("HealthRecordId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("SymptomId");

                    b.ToTable("healthrecordsymptom");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("hospital");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.MedicalActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("medicalactiontype");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.MedicalStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MedicalStaffRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("MedicalStaffRoleId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("medicalstaff");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.MedicalStaffRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("medicalstaffrole");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.ProcedureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DailyProcedureId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DailyProcedureId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("proceduretype");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.RoutineCheckup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<Guid>("MedicalStaffId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("GuestId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("routinecheckup");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("symptom");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Agency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("agency");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("bank");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.BoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("boardinghouse");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Child")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<int>("Pax")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("currency");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("TaxId");

                    b.ToTable("department");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("floor");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.HKCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("CleanCode")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("hkcode");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("market");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Nationality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("nationality");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Types")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("paymenttype");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.PriceLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("pricelocation");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.ReservationProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("reservationproperties");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HKCodeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("FloorId");

                    b.HasIndex("HKCodeId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("RoomLocationId");

                    b.ToTable("room");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.RoomLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("roomlocation");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.RoomProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("roomproperties");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Tax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("tax");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.VipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("viptype");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<int>("SaleType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("outof");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOfFloor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OutOfId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("FloorId");

                    b.HasIndex("OutOfId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("outoffloor");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOfRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OutOfId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("OutOfId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("RoomId");

                    b.ToTable("outoffroom");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOfRoomLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OutOfId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("OutOfId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("RoomLocationId");

                    b.ToTable("outofroomlocation");
                });

            modelBuilder.Entity("HMS.Entities.Models.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("guest");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.CRM.HealthRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("MedicalActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicalStaffId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("GuestId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("MedicalActionTypeId");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("healthrecord");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.FolioModels.Folio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservationDetailId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("ReservationDetailId");

                    b.ToTable("folio");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.FolioModels.FolioDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FolioId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<double>("LocalAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SourceFolioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FolioId");

                    b.HasIndex("SourceFolioId");

                    b.HasIndex("TaxId");

                    b.ToTable("foliodetail");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservastionDailyGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("GuestOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReservationDailyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservationDetailId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("ReservationDailyId");

                    b.ToTable("reservastiondailyguest");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDaily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Beb")
                        .HasColumnType("integer");

                    b.Property<int>("Child")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Free")
                        .HasColumnType("integer");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<int>("Pax")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationDetailId");

                    b.HasIndex("RoomId");

                    b.ToTable("reservationdaily");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDailyPriceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FormuleDetailId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PacketsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PeriodPricesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservationDailyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormuleDetailId");

                    b.HasIndex("PacketsId");

                    b.HasIndex("PeriodPricesId");

                    b.HasIndex("ReservationDailyId");

                    b.ToTable("reservationdailypricedetail");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CinDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CoutDate")
                        .HasColumnType("date");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<double?>("FixedPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("FixedRate")
                        .HasColumnType("double precision");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFixedPrice")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFixedRate")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PriceLocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReservationOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReservationRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomLocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Voucher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("BoardingHouseId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MarketId");

                    b.HasIndex("PriceLocationId");

                    b.HasIndex("ReservationRecordId");

                    b.HasIndex("RoomLocationId");

                    b.ToTable("reservationdetail");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupVoucher")
                        .HasColumnType("text");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShare")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("reservationrecord");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AgreementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxDay")
                        .HasColumnType("integer");

                    b.Property<int>("MinDay")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SaleDateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SaleDateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StayDateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StayDateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("condition");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("contract");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.ContractAgency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("contractagency");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.ContractPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("contractperiod");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Formule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("formule");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.FormuleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Cumulative")
                        .HasColumnType("boolean");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FormuleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PacketTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormuleId");

                    b.HasIndex("PacketTypeId");

                    b.ToTable("formuledetail");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PacketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Additional")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("packettype");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Packets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PacketTypeId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<double?>("Ratio")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("PacketTypeId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("packets");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PeriodPrices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractPeriodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PriceTypeId")
                        .HasColumnType("uuid");

                    b.Property<double>("RawPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractPeriodId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ReferanceId");

                    b.HasIndex("RoomLocationId");

                    b.ToTable("periodprices");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PriceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Child")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pax")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReferanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ReferanceId");

                    b.ToTable("pricetype");
                });

            modelBuilder.Entity("HMS.Entities.Models.CommonModels.Company", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany("Companies")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("HMS.Entities.Models.CommonModels.Referance", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany("Referances")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Address", b =>
                {
                    b.HasOne("HMS.Entities.Models.Definition.Common.Contact.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Common.Contact.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Guest", null)
                        .WithMany("Addresses")
                        .HasForeignKey("GuestId");

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.MedicalStaff", null)
                        .WithMany("Addresses")
                        .HasForeignKey("MedicalStaffId");

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.City", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Common.Contact.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");

                    b.Navigation("State");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Country", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Email", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Guest", null)
                        .WithMany("Emails")
                        .HasForeignKey("GuestId");

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.MedicalStaff", null)
                        .WithMany("Emails")
                        .HasForeignKey("MedicalStaffId");

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Phone", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Guest", null)
                        .WithMany("Phones")
                        .HasForeignKey("GuestId");

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.MedicalStaff", null)
                        .WithMany("Phones")
                        .HasForeignKey("MedicalStaffId");

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.State", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Common.Contact.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.DailyProcedure", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.RoutineCheckup", "RoutineCheckup")
                        .WithMany("DailyProcedures")
                        .HasForeignKey("RoutineCheckupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");

                    b.Navigation("RoutineCheckup");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Diagnosis", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.HealthRecordDiagnosis", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.Diagnosis", "Diagnosis")
                        .WithMany("HealthRecordDiagnoses")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.CRM.HealthRecord", "HealthRecord")
                        .WithMany("HealthRecordDiagnoses")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Diagnosis");

                    b.Navigation("Enterprise");

                    b.Navigation("HealthRecord");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.HealthRecordSymptom", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.CRM.HealthRecord", "HealthRecord")
                        .WithMany("HealthRecordSymptoms")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.Symptom", "Symptom")
                        .WithMany("HealthRecordSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("HealthRecord");

                    b.Navigation("Referance");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Hospital", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.MedicalActionType", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.MedicalStaff", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.MedicalStaffRole", "MedicalStaffRole")
                        .WithMany()
                        .HasForeignKey("MedicalStaffRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("MedicalStaffRole");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.MedicalStaffRole", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.ProcedureType", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.DailyProcedure", null)
                        .WithMany("ProcedureTypes")
                        .HasForeignKey("DailyProcedureId");

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.RoutineCheckup", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.Hospital", null)
                        .WithMany("RoutineCheckups")
                        .HasForeignKey("HospitalId");

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.MedicalStaff", "MedicalStaff")
                        .WithMany("RoutineCheckups")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Guest");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Symptom", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Agency", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Bank", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.BoardingHouse", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Category", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Currency", b =>
                {
                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Department", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Floor", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.HKCode", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Market", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Nationality", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Common.Contact.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.PaymentType", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.PriceLocation", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.ReservationProperties", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Room", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.HKCode", "HKCode")
                        .WithMany()
                        .HasForeignKey("HKCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.RoomLocation", "RoomLocation")
                        .WithMany()
                        .HasForeignKey("RoomLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Floor");

                    b.Navigation("HKCode");

                    b.Navigation("Referance");

                    b.Navigation("RoomLocation");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.RoomLocation", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.RoomProperties", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.Tax", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.FrontOffice.VipType", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOf", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOfFloor", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOf", "OutOf")
                        .WithMany()
                        .HasForeignKey("OutOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Floor");

                    b.Navigation("OutOf");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOfRoom", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOf", "OutOf")
                        .WithMany()
                        .HasForeignKey("OutOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("OutOf");

                    b.Navigation("Referance");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOfRoomLocation", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.SalesAndMarketing.OutOfEntities.OutOf", "OutOf")
                        .WithMany()
                        .HasForeignKey("OutOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.RoomLocation", "RoomLocation")
                        .WithMany()
                        .HasForeignKey("RoomLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("OutOf");

                    b.Navigation("Referance");

                    b.Navigation("RoomLocation");
                });

            modelBuilder.Entity("HMS.Entities.Models.Guest", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.CRM.HealthRecord", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.Hospital", "Hospital")
                        .WithMany("HealthRecords")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.MedicalActionType", "MedicalActionType")
                        .WithMany("HealthRecords")
                        .HasForeignKey("MedicalActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.Crm.Health.MedicalStaff", "MedicalStaff")
                        .WithMany("HealthRecords")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Guest");

                    b.Navigation("Hospital");

                    b.Navigation("MedicalActionType");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.FolioModels.Folio", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDetail", "ReservationDetail")
                        .WithMany()
                        .HasForeignKey("ReservationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");

                    b.Navigation("ReservationDetail");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.FolioModels.FolioDetail", b =>
                {
                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.FrontOffice.FolioModels.Folio", "Folio")
                        .WithMany("FolioDetails")
                        .HasForeignKey("FolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.FrontOffice.FolioModels.Folio", "SourceFolio")
                        .WithMany("SourceFolioDetails")
                        .HasForeignKey("SourceFolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Department");

                    b.Navigation("Folio");

                    b.Navigation("SourceFolio");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservastionDailyGuest", b =>
                {
                    b.HasOne("HMS.Entities.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDaily", "ReservationDaily")
                        .WithMany("ReservastionDailyGuests")
                        .HasForeignKey("ReservationDailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("ReservationDaily");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDaily", b =>
                {
                    b.HasOne("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDetail", "ReservationDetail")
                        .WithMany("ReservationDailies")
                        .HasForeignKey("ReservationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("ReservationDetail");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDailyPriceDetail", b =>
                {
                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.FormuleDetail", "FormuleDetail")
                        .WithMany()
                        .HasForeignKey("FormuleDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Packets", "Packets")
                        .WithMany()
                        .HasForeignKey("PacketsId");

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PeriodPrices", "PeriodPrices")
                        .WithMany()
                        .HasForeignKey("PeriodPricesId");

                    b.HasOne("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDaily", "ReservationDaily")
                        .WithMany()
                        .HasForeignKey("ReservationDailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormuleDetail");

                    b.Navigation("Packets");

                    b.Navigation("PeriodPrices");

                    b.Navigation("ReservationDaily");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDetail", b =>
                {
                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.PriceLocation", "PriceLocation")
                        .WithMany()
                        .HasForeignKey("PriceLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationRecord", "ReservationRecord")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("ReservationRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.RoomLocation", "RoomLocation")
                        .WithMany()
                        .HasForeignKey("RoomLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("BoardingHouse");

                    b.Navigation("Currency");

                    b.Navigation("Market");

                    b.Navigation("PriceLocation");

                    b.Navigation("ReservationRecord");

                    b.Navigation("RoomLocation");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationRecord", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Condition", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Contract", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Condition");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.ContractAgency", b =>
                {
                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Contract", "Contract")
                        .WithMany("Agencys")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Company");

                    b.Navigation("Contract");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.ContractPeriod", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Contract", "Contract")
                        .WithMany("Periods")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Contract");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Formule", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.FormuleDetail", b =>
                {
                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Formule", "Formule")
                        .WithMany()
                        .HasForeignKey("FormuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PacketType", "PacketType")
                        .WithMany()
                        .HasForeignKey("PacketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formule");

                    b.Navigation("PacketType");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PacketType", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Packets", b =>
                {
                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Contract", "Contract")
                        .WithMany("Packets")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PacketType", "PacketType")
                        .WithMany()
                        .HasForeignKey("PacketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Company");

                    b.Navigation("Condition");

                    b.Navigation("Contract");

                    b.Navigation("Enterprise");

                    b.Navigation("PacketType");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PeriodPrices", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.ContractPeriod", "ContractPeriod")
                        .WithMany()
                        .HasForeignKey("ContractPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PriceType", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.Definition.FrontOffice.RoomLocation", "RoomLocation")
                        .WithMany()
                        .HasForeignKey("RoomLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ContractPeriod");

                    b.Navigation("Enterprise");

                    b.Navigation("PriceType");

                    b.Navigation("Referance");

                    b.Navigation("RoomLocation");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.PriceType", b =>
                {
                    b.HasOne("HMS.Entities.Models.CommonModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Entities.Models.CommonModels.Referance", "Referance")
                        .WithMany()
                        .HasForeignKey("ReferanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Enterprise");

                    b.Navigation("Referance");
                });

            modelBuilder.Entity("HMS.Entities.Models.CommonModels.Company", b =>
                {
                    b.Navigation("Referances");
                });

            modelBuilder.Entity("HMS.Entities.Models.CommonModels.Enterprise", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Common.Contact.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.DailyProcedure", b =>
                {
                    b.Navigation("ProcedureTypes");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Diagnosis", b =>
                {
                    b.Navigation("HealthRecordDiagnoses");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Hospital", b =>
                {
                    b.Navigation("HealthRecords");

                    b.Navigation("RoutineCheckups");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.MedicalActionType", b =>
                {
                    b.Navigation("HealthRecords");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.MedicalStaff", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("HealthRecords");

                    b.Navigation("Phones");

                    b.Navigation("RoutineCheckups");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.RoutineCheckup", b =>
                {
                    b.Navigation("DailyProcedures");
                });

            modelBuilder.Entity("HMS.Entities.Models.Definition.Crm.Health.Symptom", b =>
                {
                    b.Navigation("HealthRecordSymptoms");
                });

            modelBuilder.Entity("HMS.Entities.Models.Guest", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.CRM.HealthRecord", b =>
                {
                    b.Navigation("HealthRecordDiagnoses");

                    b.Navigation("HealthRecordSymptoms");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.FolioModels.Folio", b =>
                {
                    b.Navigation("FolioDetails");

                    b.Navigation("SourceFolioDetails");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDaily", b =>
                {
                    b.Navigation("ReservastionDailyGuests");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationDetail", b =>
                {
                    b.Navigation("ReservationDailies");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.FrontOffice.ReservationModels.ReservationRecord", b =>
                {
                    b.Navigation("ReservationDetails");
                });

            modelBuilder.Entity("HMS.Entities.Models.MainModels.SalesAndMarketing.ContractModels.Contract", b =>
                {
                    b.Navigation("Agencys");

                    b.Navigation("Packets");

                    b.Navigation("Periods");
                });
#pragma warning restore 612, 618
        }
    }
}
